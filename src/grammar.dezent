// decisions: 
// - drop empty nodes? no - unmatched ? yields null
// - splat - uber-flexible, e.g. arrays w/in objects and objects w/in arrays

// tagline:
// Parsing with the power of regular expressions plus recursion, readability, and structure.

// todo:
// output references
// how to deal with multiple members of same name?

return _ ( { returnSt | defineSt } _ )* 
	-> $1;

_ = /\s*/ -> null,
	/\/\/[^\n]*\n/ -> null,
	/\/\*(.|\n)*\*\// -> null;

returnSt = "return" _ {parse} _ ";" 
	-> { type: "return", rule: $1 };

defineSt = {identifier} _ "=" _ {rule} ( _ "," _ {rule} )* _ ";" 
	-> { type: "define", name: $1, rules: [$2, ...$3] };

rule = {template} _ "->" _ {value} 
	-> { type: "rule", ...$1, value: $2 },

template = {templateOption} ( _ "|" _ {templateOption} )* 
	-> { options: [$1, ...$2] };

templateOption = { capture | group | string | regex | ruleref }+
	-> { type: "option", tokens: $1 };

capture = "{" _ {captureTemplate} _ "}" {repeat}?
	-> { type: "capture", ...$1, repeat: $2 };

group = "(" _ {template} _ ")" {repeat}?
	-> { type: "group", ...$1, repeat: $2 };

captureTemplate = {captureTemplateOption} ( _ "|" _ {captureTemplateOption} )*
	-> { options: [$1, ...$2] };

captureTemplateOption = { captureGroup | string | regex | ruleref }+
	-> { type: "option", tokens: $1 };

captureGroup = "(" _ {captureTemplate} _ ")" {repeat}?
	-> { type: "group", ...$1, repeat: $2 };

regex = 
	"//" -> { type: "regex", pattern: "" },
	"/" { /[^/]+([^/]|\\[^/])*/ } "/" -> { type: "regex", pattern: $1 };

ruleref = {identifier} 
	-> { type: "ruleref", name: $1 };

value = { backref | object | array | string | number | boolean | null } 
	-> $1;

backref = "$" { /\d+/ } 
	-> { type: "backref", index: $1 };

splat = 
	"..." {backref} -> { type: "splat", backrefs: [$1] },
	"...(" _ {backref} ( _ "," _ {backref} )* _ ")" -> { type: "splat", backrefs: [$1, ...$2] };

object = "{" ( _ {member} _ "," )* _ {member}? _ "}" 
	-> { type: "object", members: [...$1, $2] };

member = 
	{splat} -> $1,
	{backref|string} _ ":" _ {value} -> { name: $1, value: $2 };

array = "[" ( _ {value|splat} _ "," )* _ {value}? _ "]" 
	-> { type: "array", elements: [...$1, $2] };

string = /"/ {escape|stringText}* /"/ 
	-> { type: "string", tokens: $1 };

stringText = { /[^"\\\n]+/ } 
	-> { type: "text", value: $1 };

number = { /-?\d+(\.\d+)?([eE][-+]\d+)?/ }
	-> { type: "number", value: $1 };

boolean =
	"true"  -> { type: "boolean", value: true },
	"false" -> { type: "boolean", value: false };

null = "null" 
	-> { type: "null" };

escape = /\\(u[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]|[^\n])/
	-> { type: "escape", value: $1 };

repeat = { "*" | "+" | "?" } -> $1;

identifier = { /[_a-zA-Z][_a-zA-Z0-9]*/ }
	-> $1;
