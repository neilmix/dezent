/*
 * Dezent - Powerful pattern matching and parsing that's readable, recursive, and structured.
 *
 * Copyright (c) 2021 Neil Mix <neilmix@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. 
 */


// This is the grammar for dezent grammars -
// the dezent parser uses this grammar to parse grammar
// documents prior to parsing.

return _ ( {returndef|ruleset} _ | {constant} _ )* 
	-> { ruleset: $1, vars: { ...$2 }, pragmas: { } };

_ = ( singleLineComment | multiLineComment | whitespace? )* -> null;

singleLineComment = '//' ( !'\n' . )* '\n' -> null;
multiLineComment  = '/*' ( !'*/' . )* '*/' -> null;
whitespace        = [\u0020\t-\r]+ -> null;

returndef = 'return' whitespace _ {rule} _ ';' 
	-> { type: 'ruleset', name: 'return', rules: [$1], ...$meta };

ruleset = {identifier} _ '=' _ {rule} ( _ ',' _ {rule} )* _ ';' 
	-> { type: 'ruleset', name: $1, rules: [$2, ...$3], ...$meta };

constant = '$' {identifier} _ '=' _ {value} _ ';'
	-> [$1, $2];

rule = {patterns} _ '->' _ {value} 
	-> { type: 'rule', ...$1, value: $2, ...$meta };

patterns = {pattern} _ ( '|' _ {pattern} _ )* 
	-> { patterns: [$1, ...$2] };

pattern = ( { token } _ )+
	-> { type: 'pattern', tokens: $1 };

token = {predicate} { capture | group | string | class | ruleref | any } {modifier}
	-> { type: 'token', ...$3, ...$1, descriptor: $2 };

capture = '{' _ {capturePatterns} _ '}'
	-> { type: 'capture', ...$1 };

group = '(' _ {patterns} _ ')'
	-> { type: 'group', ...$1 };

capturePatterns = {capturePattern} _ ( '|' _ {capturePattern} _ )*
	-> { patterns: [$1, ...$2] };

capturePattern = ( { captureToken } _ )+
	-> { type: 'pattern', tokens: $1 };

captureToken = {predicate} { captureGroup | string | class | ruleref | any } {modifier}
	-> { type: 'token', ...$3, ...$1, descriptor: $2 };
	
captureGroup = '(' _ {capturePatterns} _ ')'
	-> { type: 'group', ...$1 };

class = '[' { classComponent }* ']'
	-> { type: 'class', ranges: $1 };

classComponent =
	{classChar} '-' {classChar} -> [$1, $2],
	{classChar} -> [$1, $1];

classChar = !']' {escape|char} 
	-> $1;

char = charstr
	-> { type: 'char', value: $0 };

any = '.'
	-> { type: 'any' };

ruleref = {identifier}
	-> { type: 'ruleref', name: $1, ...$meta };

predicate =
	'&' -> { and: true, not: false },
	'!' -> { and: false, not: true },
	''  -> { and: false, not: false };

modifier = 
	'*' -> { repeat: true, required: false },
	'+' -> { repeat: true, required: true },
	'?' -> { repeat: false, required: false },
	''  -> { repeat: false, required: true };

value = { backref | constref | metaref | object | array | call | string | number | boolean | null } 
	-> $1;

backref = 
	'$' { [0-9]+ } '?' {access} -> { type: 'backref', index: $1, collapse: true, access: $2, ...$meta },
	'$' { [0-9]+ } {access} -> { type: 'backref', index: $1, collapse: false, access: $2, ...$meta };

constref = '$' { identifier } {access}
	-> { type: 'constref', name: $1, access: $2, ...$meta };

metaref = '@' { 'position' | 'length' }
	-> { type: 'metaref', name: $1 };

spread = '...' {backref|constref|object|array|string|call} 
	-> { type: 'spread', value: $1, ...$meta };

object = '{' ( _ {member} _ ',' )* _ {member}? _ '}' {access}
	-> { type: 'object', members: [...$1, $2?], access: $3 };

member = 
	{spread} -> $1,
	{backref|string|identifierAsStringNode} _ ':' _ {value} -> { type: 'member', name: $1, value: $2 };

array = '[' ( _ {element} _ ',' )* _ {element}? _ ']' {access}
	-> { type: 'array', elements: [...$1, $2?], access: $3 };

element = {value|spread} 
	-> $1;

call = {identifier} _ '(' ( _ {value} _ ',' )* _ {value}? _ ')'
	-> { type: 'call', name: $1, args: [ ...$2, $3? ], ...$meta };

string = '\'' {escape|stringText}* '\''
	-> { type: 'string', tokens: $1 };

stringText = ( !['\\] . )+
	-> { type: 'text', value: $0 };

number = 
	'-'? ( [0-9]+ )? '.' [0-9]+  ( [eE] [-+] [0-9]+ )? -> { type: 'number', value: $0 },
	'-'? [0-9]+  ( [eE] [-+] [0-9]+ )? -> { type: 'number', value: $0 };

boolean =
	'true'  -> { type: 'boolean', value: true },
	'false' -> { type: 'boolean', value: false };

null = 'null' 
	-> { type: 'null' };

access = {dotAccess|bracketAccess}* 
	-> $1;

dotAccess = '.' {identifier} 
	-> { name: $1, ...$meta };

bracketAccess = '[' _ {backref|constref|metaref|string|index} _ ']' 
	-> { value: $1, ...$meta };

index = [0-9]+
	-> { type: 'number', value: $0 };

escape = '\\' { unicode | charstr }
	-> { type: 'escape', value: $1 };

unicode = 'u' [A-Fa-f0-9] [A-Fa-f0-9] [A-Fa-f0-9] [A-Fa-f0-9]
	-> $0;

charstr = !'\n' .
	-> $0;

identifier = [_a-zA-Z] [_a-zA-Z0-9]*
	-> $0;

identifierAsStringNode = {identifier}
	-> { type: 'string', tokens: [ {type: 'text', value: $1 } ] };

$meta = { meta: { pos: @position, length: @length } };
